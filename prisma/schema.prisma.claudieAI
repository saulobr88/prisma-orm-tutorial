// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider  = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "multiSchema"]
}

datasource db {
  provider  = "postgresql"
  url = env("DATABASE_URL")
  // NÃ£o usarei multiplos schemas
  // schemas = ["public","audit"]
}

enum Role {
  USER
  ADMIN
  MODERATOR
}

enum PostStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

model User {
  id            Int           @id @default(autoincrement())
  email         String        @unique
  name          String?
  role          Role          @default(USER)
  posts         Post[]
  profile       Profile?
  comments      Comment[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  deletedAt     DateTime?
  lastLoginAt   DateTime?
  metadata      Json?
  settings      Json?

  @@index([email])
  @@map("users")
}

model Profile {
  id          Int      @id @default(autoincrement())
  userId      Int      @unique
  user        User     @relation(fields: [userId], references: [id])
  avatar      String?
  bio         String?  @db.Text
  socialLinks Json?
  
  @@map("profiles")
}

model Post {
  id          Int        @id @default(autoincrement())
  slug        String     @unique
  title       String
  content     String     @db.Text
  status      PostStatus @default(DRAFT)
  published   Boolean    @default(false)
  author      User       @relation(fields: [authorId], references: [id])
  authorId    Int
  categories  Category[]
  tags        Tag[]
  comments    Comment[]
  metadata    Json?
  viewCount   Int        @default(0)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  publishedAt DateTime?
  
  @@index([slug])
  @@index([authorId])
  @@map("posts")
}

model Category {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  slug        String   @unique
  description String?
  posts       Post[]
  parent      Category? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  parentId    Int?
  children    Category[] @relation("CategoryHierarchy")
  
  @@map("categories")
}

model Tag {
  id    Int    @id @default(autoincrement())
  name  String @unique
  posts Post[]
  
  @@map("tags")
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  Int
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int
  parent    Comment? @relation("CommentReplies", fields: [parentId], references: [id])
  parentId  Int?
  replies   Comment[] @relation("CommentReplies")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([authorId])
  @@index([postId])
  @@map("comments")
}
